/* Copyright (c) 2011-2015, EPFL/Blue Brain Project
 *                     Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This file is part of BRayns
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef RENDERINGPARAMETERS_H
#define RENDERINGPARAMETERS_H

#include <brayns/common/types.h>

#include "AbstractParameters.h"


namespace brayns
{

class AbstractParameters;

/** Manages rendering parameters
 */
class RenderingParameters : public AbstractParameters
{
public:
    /**
     *  Parse the command line parameters and populates according class members
     *
     * @param argc number of command line parameters
     * @param argv actual command line parameters
     */
    RenderingParameters(int argc, const char **argv);

    /** Displays parameters managed by the class
     */
    void display() const final;

    /** OSPRay module */
    std::string getModule() const { return _module; }

    /** OSPRay renderer */
    std::string getRenderer() const { return _renderer; }

    /** Shadows */
    bool getShadows() const { return _shadows; }
    void setShadows(bool value) { _shadows = value; }

    /** Softs Shadows generated by randomizing light source position */
    bool getSoftShadows() const { return _softShadows; }
    void setSoftShadows(bool value) { _softShadows = value; }

    /** Ambient occlusion */
    float getAmbientOcclusionStrength() const { return _ambientOcclusionStrength; }
    void setAmbientOcclusionStrength(float value) { _ambientOcclusionStrength = value; }

    /** Geometry shaded by light sources. No shading coupled with ambient
     * occlusion gives great results!
     */
    bool getLightShading() const { return _lightShading; }
    void setLightShading(bool value) { _lightShading = value; }

    /** Number of samples per pixel */
    size_t getSamplesPerPixel() const { return _spp; }
    void setSamplesPerPixel(size_t value) { _spp = value; }

    /** Electron shading defined by dot product between surface normal and
     * camera position
     */
    bool getElectronShading() const { return _electronShading; }
    void setElectronShading(bool value) { _electronShading = value; }

    /** Enables photon emission according to the radiance value of the
     * material */
    bool getLightEmittingMaterials() const { return _lightEmittingMaterials; }
    void setLightEmittingMaterials(bool value) { _lightEmittingMaterials = value; }

    /** Enables depth of field by randomizing the camera position */
    bool getDepthOfField() const { return _dof; }
    void setDepthOfField(bool value) { _dof = value; }

    /** Defines the strength of the camera position randomization */
    float getDepthOfFieldStrength() const { return _dofStrength; }
    void setDepthOfFieldStrength(float value) { _dofStrength = value; }

    /** Enables a gradient background going from black to the "bgcolor"
     * renderer attribute
     */
    bool getGradientBackground() const { return _gradientBackground; }
    void setGradientBackground(bool value) { _gradientBackground = value; }

    Vector3f getBackgroundColor() const { return _backgroundColor; }
    void setBackgroundColor(const Vector3f& value) { _backgroundColor = value; }

    size_t getFrameNumber() const { return _frameNumber; }
    void setFrameNumber(size_t value) { _frameNumber = value; }

protected:
    std::string _module;
    std::string _renderer;
    float _ambientOcclusionStrength;
    bool _dof;
    float _dofStrength;
    bool _electronShading;
    bool _gradientBackground;
    bool _lightShading;
    bool _lightEmittingMaterials;
    size_t _spp;
    bool _shadows;
    bool _softShadows;
    Vector3f _backgroundColor;
    size_t _frameNumber;
};

}
#endif // RENDERINGPARAMETERS_H
