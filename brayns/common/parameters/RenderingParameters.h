/* Copyright (c) 2011-2015, EPFL/Blue Brain Project
 *                     Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This file is part of BRayns
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef RENDERINGPARAMETERS_H
#define RENDERINGPARAMETERS_H

#include "AbstractParameters.h"

#include <stdio.h>

namespace brayns
{

class AbstractParameters;

/** Manages rendering parameters
 */
class RenderingParameters : public AbstractParameters
{
public:
    RenderingParameters();

    /** Parse the command line parameters and populates according class members
     *
     * @param argc number of command line parameters
     * @param argv actual command line parameters
     */
    void parse(int argc, const char **argv) final;

    /** Displays parameters managed by the class
     */
    void display() const final;

    /** Shadows */
    bool getShadows() const { return shadows_; }
    void setShadows( bool value) { shadows_ = value; }

    /** Softs Shadows generated by randomizing light source position */
    bool getSoftShadows() const { return softShadows_; }
    void setSoftShadows( bool value) { softShadows_ = value; }

    /** Ambient occlusion */
    bool getAmbientOcclusion() const { return ambientOcclusion_; }
    void setAmbientOcclusion( bool value ) { ambientOcclusion_ = value; }

    /** Geometry shaded by light sources. No shading coupled with ambient
     * occlusion gives great results!
     */
    bool getLightShading() const { return lightShading_; }
    void setLightShading( bool value ) { lightShading_ = value; }

    /** Number of samples per pixel */
    size_t getSamplesPerPixel() const { return spp_; }
    void setSamplesPerPixel( size_t value ) { spp_ = value; }

    /** Electron shading defined by dot product between surface normal and
     * camera position
     */
    bool getElectronShading() const { return electronShading_; }
    void setElectronShading( bool value ) { electronShading_ = value; }

    /** Enables photon emission according to the radiance value of the
     * material */
    bool getLightEmittingMaterials() const { return lightEmittingMaterials_; }
    void setLightEmittingMaterials( bool value )
    { lightEmittingMaterials_ = value; }

    /** Enables depth of field by randomizing the camera position */
    bool getDepthOfField() const { return dof_; }
    void setDepthOfField( bool value ) { dof_ = value; }

    /** Defines the strength of the camera position randomization */
    float getDepthOfFieldStrength() const { return dofStrength_; }
    void setDepthOfFieldStrength( float value )
    { dofStrength_ = value; }

    /** Enables a gradient background going from black to the "bgcolor"
     * renderer attribute
     */
    bool getGradientBackground() const { return gradientBackground_; }
    void setGradientBackground( bool value )
    { gradientBackground_ = value; }


protected:
    bool   ambientOcclusion_;
    bool   dof_;
    float  dofStrength_;
    bool   electronShading_;
    bool   gradientBackground_;
    bool   lightShading_;
    bool   lightEmittingMaterials_;
    size_t spp_;
    bool   shadows_;
    bool   softShadows_;
};

}
#endif // RENDERINGPARAMETERS_H
